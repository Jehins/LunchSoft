@page "/factura"
@using System.Collections.Generic
@using System.Linq


<nav class="navbar navbar-gray">
    <ul>
        <li class="nav-item dropdown">
            <a class="nav-link" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <img class="h-8 w-8" src="/img/LunchSoft2.png" />
            </a>
            <div class="dropdown-menu dropdown-menu-left" aria-labelledby="navbarDropdown">
                <a class="dropdown-item" href="#">Reporte</a>
                <a class="dropdown-item" href="#">Cerrar sesión</a>
            </div>
        </li>

    </ul>
    <ul class="navbar-menu">
    </ul>
    <ul>
    </ul>

</nav>


<br /><br />
<div class="flex flex-row justify-center items-center w-full mt-5">
    <div class="flex flex-col items-center justify-center bg-gray-200 rounded-lg p-5 w-64">

        <h1 class="fw-bold">Agregar nuevo</h1>

        <div class="w-full mt-5">
            <label for="first_name" class="block text-sm font-medium text-gray-900">Valor</label>
            <input @oninput="Mostra" @bind="Valor" type="number" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5  w-full" placeholder="Valor" required>
        </div>

        <div class="mt-2 w-full">
            <label for="first_name" class="block mb-2 text-sm font-medium text-gray-900">Pedido</label>
            <input @oninput="Mostra" @bind="PedidoFk" type="number" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 w-full" placeholder="Pedido" required>
        </div>
        <h5>@Result</h5>
        <button @onclick="Agregar" type="button" class="mt-2 text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 mr-2 mb-2 focus:outline-none  w-full self-center">Agregar</button>


    </div>
</div>


<div class="p-2 bg-gray-100 rounded mx-64 mt-5">

    @if (facturas != null && facturas.Any())
    {
        <div class="relative overflow-x-auto">
            <table class="w-full text-sm text-left text-gray-500 ">
                <thead class="text-xs text-gray-700 uppercase">
                    <tr>
                        <th scope="col" class="px-6 py-3">
                            Valor
                        </th>
                        <th scope="col" class="px-6 py-3">
                            Pedido
                        </th>
                        <th scope="col" class="px-6 py-3">
                            Acciones
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var factura in facturas)
                    {
                        <tr class="bg-white rounded">
                            <th scope="row" class="px-6 py-4 font-medium text-gray-900">
                                @factura.Valor
                            </th>
                            <td class="px-6 py-4">
                                @factura.PedidoFk
                            </td>
                            <td class="px-6 py-4">
                                <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#staticBackdrop">Editar</button>
                                <button class="btn btn-danger" @onclick="() => Eliminar(factura.Id)">Eliminar</button>
                            </td>
                        </tr>

                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <div class="flex p-5 justify-center items-center">
            <label>No hay pedidos</label>
        </div>
    }

</div>
@code {
    void Mostra()
    {
        Result = "";
        muestra = "";
    }

    async Task Agregar()
    {
        try
        {
            if (Valor == "" || PedidoFk == "")
            {
                Result = "Por favor, complete todos los campos.";
            }
            else
            {
                var nuevaFactura = new Shared.Models.Factura
                    {
                        Valor = int.Parse(Valor),
                        PedidoFk = int.Parse(PedidoFk),
                    };

                var resul = await Shared.Acceso.Factura.CrearFactura(nuevaFactura);

                if (!resul)
                {
                    Result = "No se pudo crear la factura.";

                    return;
                }
                else
                {
                    Result = "Se creo la factura con exito.";
                }
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Result = "Error al crear el empleado.";
            Console.WriteLine("ER:" + ex.Message);
        }
    }

    public List<Shared.Models.Factura> facturas;

    protected override async Task OnInitializedAsync()
    {
        facturas = await Shared.Acceso.Factura.ObtenerF();
    }


    async Task Eliminar(int facturaid)
    {
        var result = await Shared.Acceso.Menus.EliminarMenu(facturaid);
        if (result)
        {
            muestra = "Se eliminó correctamente";
        }
        else
        {
            muestra = "No se pudo eliminar";
        }
        StateHasChanged();
    }

    string Valor = "";
    string PedidoFk = "";
    string Result = "";
    string muestra = "";

}

<style>
    .Muestra {
        block-size: auto;
        margin-top: 100px;
        margin-bottom: 100px;
        margin-right: 70px;
        margin-left: 70px;
    }
    
    body {
        font-family: Arial, sans-serif;
        background-color: #f2f2f2;
        margin: 0;
        padding: 0;
    }

    .navbar {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px 20px;
        background-color: white;
        z-index: 9999;
    }

    .navbar-logo {
        font-size: 24px;
        font-weight: bold;
        color: #333;
        text-decoration: none;
    }

    .navbar-menu {
        display: flex;
        align-items: center;
    }

        .navbar-menu li {
            list-style: none;
            margin-right: 20px;
        }

            .navbar-menu li a {
                font-size: 14px;
                color: #666;
                text-decoration: none;
            }

                .navbar-menu li a:hover {
                    color: #333;
                }

    .btn-register {
        margin-right: 10px;
        padding: 10px 20px;
        background-color: #eee;
        color: #333;
        text-decoration: none;
        border-radius: 4px;
        transition: background-color 0.3s ease;
    }

        .btn-register:hover {
            background-color: #ccc;
        }

    .btn-login {
        padding: 10px 20px;
        background-color: #007bff;
        color: #fff;
        text-decoration: none;
        border-radius: 4px;
        transition: background-color 0.3s ease;
    }

        .btn-login:hover {
            background-color: #0056b3;
        }

    .content {
        padding-top: 80px;
    }

    .menu-list-container {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-around;
        padding: 20px;
    }

    .menu-item {
        width: 300px;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        text-align: center;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px;
    }

    .menu-item-nombre {
        font-size: 20px;
        font-weight: bold;
        margin: 10px 0;
    }

    .menu-item-precio {
        font-size: 18px;
        color: #007bff;
    }

    .menu-item-descripcion {
        font-size: 14px;
    }

    .menu-item-buttons {
        display: flex;
        align-items: center;
        gap: 30px;
    }

    .menu-item-icon {
        width: 45px;
        height: 45px;
    }
</style>